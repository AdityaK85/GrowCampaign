// auth.ts

import dotenv from "dotenv";
dotenv.config();


import passport from "passport";
import session from "express-session";
import { Express, RequestHandler } from "express";
import memoize from "memoizee";
import connectPg from "connect-pg-simple";
import { storage } from "./storage";
import { jwtDecode } from "jwt-decode";
const OpenIDClient = await import('openid-client');
const { Issuer } = OpenIDClient;




const ISSUER_URL = 'https://example.com/.well-known/openid-configuration';
// Validate env
const {
  REPL_ID,
  CLIENT_SECRET,
  SESSION_SECRET,
  DATABASE_URL,
  NODE_ENV,
  HOSTNAME
} = process.env;

if (!REPL_ID || !CLIENT_SECRET || !ISSUER_URL || !SESSION_SECRET || !DATABASE_URL) {
  throw new Error("Missing required environment variables");
}

// Memoized OIDC client
const getClient = memoize(async () => {
  const issuer = await Issuer.discover(ISSUER_URL);  // Discover issuer using URL
  const client = new issuer.Client({
    client_id: REPL_ID,
    client_secret: CLIENT_SECRET,
    redirect_uris: [
      `${NODE_ENV === "production" ? `https://${HOSTNAME}` : "http://localhost:5000"}/api/callback`
    ],
    response_types: ['code'],
  });

  return client;
});

// Session setup with PostgreSQL
export function getSession() {
  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week
  const pgStore = connectPg(session);

  return session({
    secret: SESSION_SECRET!,
    resave: false,
    saveUninitialized: false,
    store: new pgStore({
      conString: DATABASE_URL,
      createTableIfMissing: true,
      ttl: sessionTtl,
      tableName: "sessions",
    }),
    cookie: {
      httpOnly: true,
      secure: NODE_ENV === "production",
      maxAge: sessionTtl,
    },
  });
}

// Decode and attach token data
function updateUserSession(user: any, tokens: TokenSet) {
  const claims = tokens.claims();
  user.claims = claims;
  user.access_token = tokens.access_token;
  user.refresh_token = tokens.refresh_token;
  user.expires_at = Date.now() + (tokens.expires_in || 3600) * 1000;
}

// Insert or update user in storage
async function upsertUser(claims: any) {
  await storage.upsertUser({
    id: claims["sub"],
    email: claims["email"],
    firstName: claims["given_name"] || claims["first_name"],
    lastName: claims["family_name"] || claims["last_name"],
    profileImageUrl: claims["picture"] || claims["profile_image_url"],
  });
}

// Passport setup
export async function setupAuth(app: Express) {
  app.set("trust proxy", 1);
  app.use(getSession());
  app.use(passport.initialize());
  app.use(passport.session());

  const oidcClient = await getClient();

  // Passport verify callback
  const verify = async (tokenset: TokenSet, userinfo: any, done: Function) => {
    const user = {
      sub: userinfo.sub,
      email: userinfo.email,
      name: userinfo.name,
    };
    updateUserSession(user, tokenset);
    await upsertUser(tokenset.claims());
    done(null, user);
  };

  passport.use(
    "oidc",
    new Strategy({ client: oidcClient, params: { scope: "openid email profile" } }, verify)
  );

  passport.serializeUser((user: any, done) => done(null, user));
  passport.deserializeUser((obj: any, done) => done(null, obj));

  // Login route
  app.get("/api/login", passport.authenticate("oidc"));

  // Callback route
  app.get("/api/callback", passport.authenticate("oidc", {
    successRedirect: "/",
    failureRedirect: "/login",
  }));

  // Logout route
  app.get("/api/logout", async (req, res) => {
    req.logout(() => {});
    const client = await getClient();
    const logoutUrl = client.endSessionUrl({
      post_logout_redirect_uri: `${req.protocol}://${req.get("host")}/`,
    });
    res.redirect(logoutUrl);
  });
}

// Middleware to protect routes
export const isAuthenticated: RequestHandler = async (req, res, next) => {
  const user = req.user as any;

  if (!req.isAuthenticated?.() || !user?.expires_at) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  const now = Date.now();
  if (now < user.expires_at) {
    return next();
  }

  try {
    const client = await getClient();
    const refreshed = await client.refresh(user.refresh_token);
    updateUserSession(user, refreshed);
    return next();
  } catch (err) {
    return res.status(401).json({ message: "Session expired. Please login again." });
  }
};
